Toy model for carbon diffusion and graphite formation
% Isothermal condition
% Isotropic condition
numx = 1001;   %number of grid points in x (1000micron=1mm)
numt = 3000000;  %number of time steps to be iterated-0.015 years
dx = 0.001/(numx - 1);% grid unit sizes-1micron
dt = 0.1;%unit time-1sec
x = 0:dx:0.001;   %vector of x values,from 1micron to 1mm
% T=291.54*c+823.5122; where c stands for concentration.
T=linspace(1202,1013,numt); %temp range for conc 1.3% to 0.65%
D0=1.23e-06;
A=15050;
D2=D0*(exp(-A./(T)));% all thibaux,2007 params
D1=1e-25;
%D2=1e-12;
ratio=0.9228387;  %12C/13C mass ratio
Q=ratio^0.225; %Mueller.et.al 2014 mass fractionation kinetic factor
d1=D1*Q;
d2=D2*Q;
%R=1e-6;


%specify initial conditions
C12= zeros(numx,1);
%C12tot=zeros(numx,numt);
C12(:,1)=1.3;
C12(1:3)=95;
%C12tot(:,1)=C12(:,1);
C13= zeros(numx,1); % preallocating for better utility, (when over 10^6 must do peicewise)
%C13tot=zeros(numx,numt);
C13(:,1)=1.3*0.0112372;
C13(1:3)=95*0.0112372;
%C13tot(:,1)=C13(:,1);
%K=95/1.3; %partition coefficient
cc=linspace(1.3,0.76,numt);
K=95./cc; %partition coefficient evolving with time

Fractionation factor at the junction!
Alp=(exp(0.001*(8.85*(10e5./(T.^2))+0.99)));


step(1)=15000;
for k=2:75
    step(k)=step(k-1)+(3*15000); %accerating growth rate of crsytal using a incremental step function       
end
k=4;
Cm13=zeros(numx,length(step));
Cm12=zeros(numx,length(step));
Cm13(:,1)=C13(:,1);
Cm12(:,1)=C12(:,1);
%initialize everything to zero

Algorithm based on non-equilibrium Batch crystal separation, in a non-isothermal-linear non-accelerating crystallisation, 
using centered finite difference method on 2nd order Fick's equation.

%C12=1.80005;
f=linspace(1,0,step(k-3));%batch crystaliisation fraction on step sizes
b=1;%counter for the batch crystaliisation fraction indexing
%iterate difference equations
for j=1:numt
   
   %t(2) = t(j) + dt;
   for i=2:numx-1
       if i<k
            C12(i,2) = C12(i,1) + D1*(dt/dx^2)*(C12(i+1,1) - 2*C12(i,1) + C12(i-1,1)); 
       end
       if i==k
            C12(i,2) = C12(i,1) + D1*(dt/dx^2)*(C12(i-1,1) - C12(i,1))+(C12(i+1,1)...
                -(C12(i+1,1)/(f(b)*(1-K(i)/Alp(i))+K(i)/Alp(i))))*0.01;
       end
       if i==(k+1)
            C12(i,2) = C12(i,1) + D2(j)*(dt/dx^2)*(C12(i+1,1) - C12(i,1))-(C12(i,1)...
                -(C12(i,1)/(f(b)*(1-K(i)/Alp(i))+K(i)/Alp(i))))*0.01;
       end
       if i>(k+1)
            C12(i,2) = C12(i,1) + D2(j)*(dt/dx^2)*(C12(i+1,1) - 2*C12(i,1) + C12(i-1,1));
       end
   end
   for i=2:numx-1
       if i<k
            C13(i,2) = C13(i,1) + d1*(dt/dx^2)*(C13(i+1,1) - 2*C13(i,1) + C13(i-1,1)); 
       end
       if i==k
            C13(i,2) = C13(i,1) + d1*(dt/dx^2)*(C13(i-1,1) - C13(i,1))+(C13(i+1,1)...
                -(C13(i+1,1)/(f(b)*(1-K(i))+K(i))))*0.01;
       end
       if i==(k+1)
            C13(i,2) = C13(i,1) + d2(j)*(dt/dx^2)*(C13(i+1,1) - C13(i,1))-(C13(i,1)...
                -(C13(i,1)/(f(b)*(1-K(i))+K(i))))*0.01;
       end
       if i>(k+1)
            C13(i,2) = C13(i,1) + d2(j)*(dt/dx^2)*(C13(i+1,1) - 2*C13(i,1) + C13(i-1,1));
       end       
   end
%     C12tot(:,j+1)=C12(:,2);
%     C13tot(:,j+1)=C13(:,2);
   b=b+1;
   if mod(j,step(k-3))==0
       Cm13(:,k-2)=C13(:,2);
       Cm12(:,k-2)=C12(:,2);
      
       k=k+1;
       %C0=C(k,j);    
       f=linspace(1,0,step(k-3));
       b=1;
       %if k==9
           %break;
       %end
       %step=step+13000;% deccelerating growth rate
       %C(k,2)=(K+1)*C(k+1,j);
   end
   
   C12(1,2) = C12(2,2);          %C(1,2) found from no-flux condition
   C12(numx,2) = C12(numx-1,2);  %C(numx,2) found from no-flux condition
   C13(1,2) = C13(2,2);          %C(1,2) found from no-flux condition
   C13(numx,2) = C13(numx-1,2);  %C(numx,2) found from no-flux condition
   C12(:,1)=C12(:,2);
   C13(:,1)=C13(:,2);
if j>2
   s12 = sum(C12(1:numx-1,2))-sum(C12(1:numx-1,1));% simple simpson integral
   s13 = sum(C13(1:numx-1,2))-sum(C13(1:numx-1,1));
   if s12>1 || s13>0.1 %checking the integral for mass conservation at 0.1 error margin allowance
   disp("error in mass transfer")
   break;
   end
end
j
k
end


CmC=Cm13./Cm12; %isotope ratio at steps
Crm=((CmC./0.0112372)-1)*1000; % in delta notation
save('testcl07_1','Cm12','Cm13','CmC','Crm','step','-v7.3');

%Cr=((CmC./0.0112372)-1)*1000;
%Cm=Cm13./Cm12;

% plot(x,Cr(1:end,100));
% 
% plot(x,Crm(:,1));
% hold on
% grid
% plot(x,Crm(:,2));
% plot(x,Crm(:,3));
% plot(x,Crm(:,4));
% plot(x,Crm(:,5));
% hold off
%  CmC=C(:,step-1);
%save('cluster_test_BF','C12','C13','C','step','-v7.3');
%save('testcl24_2','Cm12','Cm13','CmC','step','-v7.3');
%  CmC=C(:,step-1);
% save('testcl22','C12','C13','C','step','-v7.3');
%save('testcl26_1','Cm12','Cm13','CmC','Cr','step','-v7.3');


%figure(1);
%for j=1:numt

%plot(x,C(1:end-1,j),"LineWidth",2);
% plot(x,C12tot(1:end,1));
% hold on
%  axis([0.00098,0.001,1.5,2]);
% plot(x,C12tot(1:end,100));
% plot(x,C12tot(1:end,1000));
% plot(x,C12tot(1:end,2000));
% plot(x,C12tot(1:end,4000));
% plot(x,C12tot(1:end,7000));
% plot(x,C12tot(1:end,10000));
% plot(x,C12tot(1:end,20000));
% plot(x,C12tot(1:end,30000));
% plot(x,C12tot(1:end,40000));
% plot(x,C12tot(1:end,80000));
% plot(x,C12tot(1:end,100000));
% plot(x,C(1:end,200000));
% plot(x,C(1:end,300000));
% h=gca;
% 
% h.YLimMode='manual';
% h.FontSize=10;
% h.FontWeight="bold";
% h.LineWidth=1.8;
% xlabel('x');
% ylabel('c(x,t)');
% %title(sprintf("Time:%d",j))

% 
% drawnow;
% hold off

%end



% CmCtot=C13tot./C12tot;
% plot(x,CmCtot(:,100))
% hold on
% plot(x,CmCtot(:,500));
% plot(x,CmCtot(:,2000));
% plot(x,CmCtot(:,3000));
% plot(x,CmCtot(:,4000));
% plot(x,CmCtot(:,5000));




